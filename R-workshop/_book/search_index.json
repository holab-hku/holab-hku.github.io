[["prerequisites-1.html", "Chapter 2 Prerequisites 2.1 To Install R 2.2 To Install RStudio", " Chapter 2 Prerequisites 2.1 To Install R Open an internet browser and go to www.r-project.org. Click the download R link in the middle of the page under Getting Started. Select a CRAN location (a mirror site) and click the corresponding link. Click on the Download R for (Mac) OS X link at the top of the page. Click on the file containing the latest version of R under Files. Save the .pkg file, double-click it to open, and follow the installation instructions. Now that R is installed, you need to download and install RStudio. 2.2 To Install RStudio Go to www.rstudio.com and click on the Download RStudio button. Click on Download RStudio Desktop. Click on the version recommended for your system, or the latest Mac version, save the .dmg file on your computer, double-click it to open, and then drag and drop it to your applications folder. "],["introduction-to-r.html", "Chapter 3 Introduction to R 3.1 Vectors 3.2 Matrix 3.3 List &amp; DataFrame", " Chapter 3 Introduction to R R is a free and powerful statistical software for analyzing and visualizing data. In this chapter, we provide a quick and easy introduction to R programming. With the knowledge gained in this workshop, you will be ready to undertake your first very own data analysis. Oracle estimated over 2 million R users worldwide in 2012, cementing R as a leading programming language in statistics and data science. Every year, the number of R users grows by about 40%, and an increasing number of organizations are using it in their day-to-day activities. So, enjoy your R journey! 3.1 Vectors Vectors are a fundamental concept in R, as many functions operate on and return vectors, so it is best to master these as soon as possible. For the technically inclined, in R, a (numeric) vector is an object consisting of a one-dimensional array of scalars. HINT: YOU can get the documentation of a function using ?. E.g ?rep TRY: a &lt;- rep(1,10) b &lt;- 1:10 c(a,b) a+b Quiz 1. What is the difference of c(a,b) and a+b 2. Create a vector with &quot;R&quot; &quot;is&quot; &quot;fun&quot; HINT: use c() A new vector can be sliced from a given vector with a numeric index vector, which consists of member positions of the original vector to be retrieved. To produce a vector slice between two indexes, we can use the colon operator :. This can be convenient for situations involving large vectors. How to splice your vector? marks &lt;- c(50, 100, 90, 80, 70) student_names &lt;- c(&quot;Amy&quot;,&quot;Bobby&quot;,&quot;Cindy&quot;,&quot;Eddy&quot;,&quot;Dylon&quot;) names(marks) &lt;- student_names marks[c(2, 3)] marks[c(&quot;Bobby&quot;,&quot;Cindy&quot;)] Quiz 1. Get the highest mark amongst Amy, Cindy, Dylon HINT: use max() 3.2 Matrix Matrix is a two dimensional data structure in R programming. Matrix is similar to vector but additionally contains the dimension attribute. All attributes of an object can be checked with the attributes() function (dimension can be checked directly with the dim() function). 3.2.1 Make a matrix m &lt;- matrix(1:9, nrow = 3, dimnames = list(c(&quot;X&quot;,&quot;Y&quot;,&quot;Z&quot;), c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;))) #Change names colnames(m) &lt;- c(&quot;C1&quot;,&quot;C2&quot;,&quot;C3&quot;) rownames(m) &lt;- c(&quot;R1&quot;,&quot;R2&quot;,&quot;R3&quot;) Make a matrix by using functions cbind() and rbind() as in column bind and row bind. cbind(c(1,2,3),c(4,5,6)) rbind(c(1,2,3),c(4,5,6)) cbind(m,c(10,11,12)) rbind(m,c(10,11,12)) A We can access elements of a matrix using the square bracket [ indexing method. Elements can be accessed as var[row, column]. Here rows and columns are vectors. m &lt;- matrix(1:9, nrow = 3, dimnames = list(c(&quot;X&quot;,&quot;Y&quot;,&quot;Z&quot;), c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;))) # select rows 1 &amp; 2 and columns 2 &amp; m[c(1,2),c(2,3)] # leaving column field blank will select entire columns m[c(3,2),] 3.2.2 Modify a matrix Assian a value -&gt; -&gt;&gt; rightwards assignment &lt;- &lt;&lt;- assignment (right to left) = assignment (right to left) Assign all elements less than 5 to 0 m[m&lt;5] &lt;- 0 Transpose a matrix t(m) Remove last row m &lt;- m[-3,] / m &lt;- m[-nrow(m),] 3.3 List &amp; DataFrame List is a data structure having components of mixed data types. A vector having all elements of the same type is called atomic vector but a vector having elements of different type is called list. We can check if its a list with typeof() function and find its length using length(). x &lt;- list(&quot;a&quot; = 2.5, &quot;b&quot; = TRUE, &quot;c&quot; = 1:3) typeof(x) length(x) Compactly Display the Structure of an Arbitrary R Object using str() str(x) Data frame is a two dimensional data structure in R. It is a special case of a list which has each component of equal length. x &lt;- data.frame(&quot;SID&quot; = 1:3, &quot;Age&quot; = c(23,25,21), &quot;Name&quot; = c(&quot;Amy&quot;,&quot;Bobby&quot;,&quot;Cindy&quot;), &quot;Mark&quot; = c(100,82,75)) Accessing with [[ or $ is similar. However, it differs for [ in that, indexing with [ will return us a data frame but the other two will reduce it into a vector. TRY: x[&quot;Name&quot;] x[[&quot;Name&quot;]] x$Name Select students with mark greater than 80 and make a new list called x_highmark. x_highmark &lt;- x[x$Mark&gt;80,] Quiz 1.Select Students with mark greater than 80 and get the average age of them. HINT: use mean() mean(x[x$Mark&gt;80,]$Age) "],["data-manipulation.html", "Chapter 4 Data manipulation 4.1 apply functions 4.2 Pattern matching", " Chapter 4 Data manipulation 4.1 apply functions 4.1.1 apply() apply() takes Data frame or matrix as an input and gives output in vector, list or array. Apply function in R is primarily used to avoid explicit uses of loop constructs. It is the most basic of all collections can be used over a matrix. apply(X, MARGIN, FUN) Here: -x: an array or matrix -MARGIN: take a value or range between 1 and 2 to define where to apply the function: -MARGIN=1: the manipulation is performed on rows -MARGIN=2: the manipulation is performed on columns -MARGIN=c(1,2) the manipulation is performed on rows and columns -FUN: tells which function to apply. Built functions like mean, median, sum, min, max and even user-defined functions can be applied&gt; Example1: m1 &lt;- matrix(C&lt;-(1:10),nrow=5, ncol=6) m1_colsum &lt;- apply(m1, 2, sum) Example2: a function to find standard error was created, then passed into an apply function to find the standard error of each column. m2 &lt;- matrix(c(1:10, 11:20, 21:30), nrow = 10, ncol = 3) st.err &lt;- function(x){ sd(x)/sqrt(length(x)) } apply(m2, 2, st.err) Example3: the apply function is used to transform the values in each cell If you set the MARGIN to 1:2 it will have the function operate on each cell. apply(m2, 1:2, function(x) x+3) 4.1.2 lapply() lapply() in R takes list, vector or data frame as input and gives output in list. lapply(X, FUN) Arguments: -X: A vector or an object -FUN: Function applied to each element of x Example: A&lt;-c(1:9) B&lt;-c(1:12) C&lt;-c(1:15) mylist&lt;-list(A,B,C) lapply(mylist, sum) 4.1.3 sapply() sapply() works just like lapply, but will simplify the output if possible. This means that instead of returning a list like lapply, it will return a vector instead. Example: sapply(mylist, sum) 4.1.4 tapply() Apply a function to each cell of a ragged array, that is to each (non-empty) group of values given by a unique combination of the levels of certain factors. Example1: tdata &lt;- as.data.frame(cbind(c(1,1,1,1,1,2,2,2,2,2), m2)) tapply(tdata$V2, tdata$V1, mean) Example2: summary &lt;- tapply(tdata$V2, tdata$V1, function(x) c(mean(x), sd(x))) 4.2 Pattern matching 4.2.1 Find strings grep(pattern, string) returns by default a list of indices. If the regular expression, pattern, matches a particular element in the vector string, it returns the elements index. For returning the actual matching element values, set the option value to TRUE by value=TRUE. Pattern matching in R defaults to be case sensitive. Turn the setting off with ignore.case = TRUE.(tolower() and toupper() functions can convert everything to lower or upper case.) strings &lt;- c(&quot;Abcd&quot;, &quot;cdab&quot;, &quot;ca bd&quot;) grep(&quot;ab&quot;, strings) grep(&quot;ab&quot;, strings, value = FALSE) grep(&quot;ab&quot;, strings, value = TRUE) grep(&quot;ab&quot;, strings, value = TRUE,ignore.case = TRUE) 4.2.2 Find and replace patterns gsub(pattern, replacement, string) returns the modified string after replacing every pattern occurrence with replacement in string. sub(pattern, replacement, string) replaces the first pattern occurrence. studentID &lt;- c(&quot;u1000&quot;, &quot;u1001&quot;, &quot;u1002&quot;) gsub(&quot;u&quot;, &quot;U&quot;, studentID) 4.2.3 Regular expression Quantifiers specify how many times that the preceding pattern should occur. * : matches at least 0 times. + : matches at least 1 times. ? : matches at most 1 times. {n} : matches exactly n times. {n,} : matches at least n times. {,m} : matches at most m times. {n,m} : matches between n and m times. strings &lt;- c(&quot;a&quot;, &quot;ab&quot;, &quot;acb&quot;, &quot;accb&quot;, &quot;acccb&quot;, &quot;accccb&quot;) grep(&quot;ac*b&quot;, strings, value = TRUE) grep(&quot;ac+b&quot;, strings, value = TRUE) grep(&quot;ac?b&quot;, strings, value = TRUE) grep(&quot;ac{2}b&quot;, strings, value = TRUE) grep(&quot;ac{2,}b&quot;, strings, value = TRUE) grep(&quot;ac{2,3}b&quot;, strings, value = TRUE) ^ : Start of the string. $ : End of the string. \\\\&lt; : Beginning of a word \\\\&gt; : End of a word strings &lt;- c(&quot;abcd&quot;, &quot;cdab&quot;, &quot;cabd&quot;, &quot;c abd&quot;, &quot;abc&quot;,&quot;*ab&quot;) grep(&quot;^ab&quot;, strings, value = TRUE) grep(&quot;ab$&quot;, strings, value = TRUE) grep(&quot;\\\\&lt;a&quot;, strings, value = TRUE) grep(&quot;c\\\\&gt;&quot;, strings, value = TRUE) . : Any non-empty character [...] : a permitted character list. Use - inside the brackets to specify a range of characters. [^...] : an excluded character list. Match any characters except those inside the square brackets. | : an OR operator, matches patterns on either side of the |. \\: Escape metacharacters in regular expression, i.e. $ * + . ? [ ] ^ { } | ( ) \\` strings &lt;- c(&quot;^ab&quot;, &quot;ab&quot;, &quot;abc&quot;, &quot;abd&quot;, &quot; abc d&quot;, &quot;abe&quot;, &quot;ab 12&quot;) grep(&quot;ab.&quot;, strings, value = TRUE) grep(&quot;ab[c-e]&quot;, strings, value = TRUE) grep(&quot;ab[^c]&quot;, strings, value = TRUE) grep(&quot;\\\\^ab&quot;, strings, value = TRUE) grep(&quot;abc|abd&quot;, strings, value = TRUE) [[:digit:]] or \\\\d or [0-9] : digits 0 1 2 3 4 5 6 7 8 9 \\\\D or [^0-9] : non-digits [[:lower:]] or [a-z] : lower-case letters [[:upper:]] or [A-Z] : upper-case letters [[:alpha:]] or [A-z] : alphabetic characters [[:alnum:]] or [A-z0-9] : alphanumeric characters \\\\w : word characters include alphanumeric characters 0-9,a-z,A-Z, - and underscores _ \\\\W : non-word characters [[:blank:]] : space and tab [[:space:]] or \\\\s : space characters: tab, newline, vertical tab, form feed, carriage return, space \\\\S : not space characters [[:punct:]] : punctuation characters ! \" # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ ] ^ _ { | } ~` [[:cntrl:]] or \\\\c : control characters, like or "],["basic-stats.html", "Chapter 5 Basic Stats 5.1 Generate data 5.2 Statistical analysis 5.3 Some Basic Plots 5.4 Example 1 5.5 Example 2", " Chapter 5 Basic Stats Functionc used rnorm, runif, round, print, summary, mean, median, min, max, sd, var, sum, length, cbind, rbind, rownames, colnames, dim 5.1 Generate data Set the seed to the random number generation to be 1. This ensures the results are reproducible across everyones execution. Height(cm) of 50 males and 50 females(estimated from https://dqydj.com/height-percentile-calculator-for-men-and-women/) set.seed(1) male_height = rnorm(n = 50, mean = 175.6, sd = 11) female_height = rnorm(n = 50, mean = 161.5, sd = 10.5) Keep only two decimal places male_height = round(male_height, 2) female_height = round(female_height, 2) Check the number of elements in the vector length(male_height) Get Basic Information about the Vector Get basic information about the vector (minimum, maximum and quantiles) using summary() summary(male_height) summary(female_height) Specific functions for Mean, Median, Minimum, Maximum, Standard deviation, Variance, Sum. mean(), median(), min(), max(), sd(), var(), sum() The R software provides access to the uniform distribution, runif() function generates random deviates of the uniform distribution and is written as runif(n, min = 0, max = 1). We may easily generate n number of random samples within any interval, defined by the min and the max argument. Example: approximate the density function for XU(0,1) rand.unif &lt;- runif(10000, min = 0, max = 1) hist(rand.unif, freq = FALSE, xlab = &#39;x&#39;, density = 20) If we have another record about weight for the same group of people, we can group weight and height data together into a list(assuming weight has correlation with height). set.seed(1) male_weight = 0.52*male_height + runif(n = 50, min = -15, max = 15) male_weight = round(male_weight, 2) female_weight = 0.48*female_height + runif(n = 50, min = -14, max = 14) female_weight = round(female_weight, 2) Make a group Weight data and height data together male_group = list(height = male_height, weight = male_weight) female_group = list(height = female_height, weight = female_weight) 5.2 Statistical analysis Correlation: check the correlation between height and weight in male group and female group cor(male_group$height, male_group$weight) cor(female_group$height, female_group$weight) t.test: test if there is a significant difference between the means of height&amp;weight in the male group and female group t.test(male_group$height, female_group$height) t.test(male_group$weight, female_group$weight) fisher.test: test the proportions of people with obesity in male group and female group have significant difference or not Calculate BMI using equation BMI = weight(kg)/height(m)^2 male_BMI = male_group$weight/(male_group$height/100)^2 female_BMI = female_group$weight/(female_group$height/100)^2 For people with BMI equal or larger than 30, define them as having obesity male_obesity = ifelse(male_BMI &gt;= 30, &quot;Yes&quot;, &quot;No&quot;) female_obesity = ifelse(female_BMI &gt;= 30, &quot;Yes&quot;, &quot;No&quot;) Get the number of people with obesity in each group and summary in a matrix male_num = table(male_obesity) female_num = table(female_obesity) obesity_num = rbind(male_num, female_num) fishers exact test fisher.test(obesity_num) 5.3 Some Basic Plots Histogram plot hist(male_group$height, freq = FALSE, main = &quot;Histogram Plot&quot;) Density plot plot(density(male_group$height), main = &quot;Density Plot&quot;) Combine histogram plot and density plot using lines() The lines( ) function adds information to a graph. It can not produce a graph on its own. Usually it follows a plot(x, y) command that produces a graph. hist(male_group$height, freq = FALSE, main = &quot;Histogram and Density&quot;) lines(density(male_group$height), col = &quot;red&quot;) Boxplot of height in male group and female group boxplot(male_group$height, female_group$height, names = c(&quot;male&quot;, &quot;female&quot;), ylab = &quot;height(cm)&quot;) 5.4 Example 1 This exercise uses the PlantGrowth data set to demonstrate how to: 1. select / filter a value in a dataframe 2. plot density plot 3. Perform t test PlantGrowth Extract weight of control and treatment groups and name them as ctrl_grp and trt1_grp. ctrl_grp &lt;- PlantGrowth[PlantGrowth[, 2] == &quot;ctrl&quot;,1] trt1_grp &lt;- PlantGrowth[PlantGrowth[, 2] == &quot;trt1&quot;,1] Plot density plot(density(ctrl_grp), main = &quot;Control Group vs Treatment 1&quot;, xlab = &quot;weight&quot;, xlim = c(2.5,7.5), ylim = c(0,0.65)) par(new = TRUE) plot(density(trt1_grp), main = &quot;&quot;, axes = FALSE, xlab = &quot;&quot;, ylab = &quot;&quot;, lty = 2, xlim = c(2.5,7.5), ylim = c(0,0.65)) Run t test t.test(ctrl_grp, trt1_grp) 5.5 Example 2 This exercise demonstrates how to use apply and tapply to summarize information from a table apply() takes Data frame or matrix as an input and gives output in vector, list or array. Using apply to get the mean and sd on every column mtcars.mean &lt;- apply(mtcars[,1:7], 2, mean) mtcars.sd &lt;- apply(mtcars[,1:7], 2, sd) Using t apply to get the maxmimum mpg per vs type mtcars.max.vs &lt;- tapply(mtcars$mpg, mtcars$vs, max) Filtering Using grepl to select names with Merc mtcars[grepl(&quot;Merc&quot;, rownames(mtcars)),] combining tapply and apply apply(mtcars[,1:7],2,function(x) tapply(x, mtcars$gear, sum)) Using filter to select disp larger than 200 mtcars[mtcars$disp &gt; 200,] "],["exercise-1.html", "Chapter 6 Exercise 1 6.1 Quiz 6.2 Answer", " Chapter 6 Exercise 1 6.1 Quiz Using the PlantGrowth data, try to answer: Are there significant increase between the treatment group 1 and 2? Plot the density plot and perform the t test. 6.2 Answer trt1_grp &lt;- PlantGrowth[PlantGrowth[, 2] == &quot;trt1&quot;,1] trt2_grp &lt;- PlantGrowth[PlantGrowth[, 2] == &quot;trt2&quot;,1] # plot density plot(density(trt1_grp), main = &quot;Control Group vs Treatment 1&quot;, xlab = &quot;weight&quot;, xlim = c(2.5,7.5), ylim = c(0,1)) par(new = TRUE) plot(density(trt2_grp), main = &quot;&quot;, axes = FALSE, xlab = &quot;&quot;, ylab = &quot;&quot;, lty = 2, xlim = c(2.5,7.5), ylim = c(0,1)) # run t test t.test(trt1_grp, trt2_grp) "],["exercise-2.html", "Chapter 7 Exercise 2 7.1 quiz 7.2 Answers", " Chapter 7 Exercise 2 Load dataset mpg library(ggplot2) data(&quot;mpg&quot;) 7.1 quiz Q1 How many different car manufacturers are present? Tip: Use functions: length() and unique() Q2 How many SUVs (class) does each car manufacturer have? Tip: Use table() Q3 Create a new data.table with only automatic transmission type (trans) and 4 cylinders (cyl) Tip: Use grepl() Q4 Create a new column called trans_subtype, with the transmission subtype information (the value inside the brackets) Tip: Use gsub Q5 For toyotas toyota tacoma 4wd model, rename them to only tacoma 4wd Tip: Try use gsub Q6 Create a new column called ID, with the first 3 characters of the manufacturer name capitalised with year of manufacturer separated by a _ Tip: Use toupper() and substr() and paste0() E.g. audi 1999 --&gt; AUD_1999 Q7 How many different model names have number(s) in their name for each manufacturer? Tips: Use table() and grepl() Q8 Find the average city mileage (cty) for each manufacturer type Tip: use sapply Q9 What is the average city mileage (cty) for models with number(s) in the name for each manufacturer? Q10 Create a new data frame called mpg_summary with the following columns: - (A) Manufacturer name - (B) number of different models for that manufacturer - (C) average displ - (D) manufacturing range (e.g. 1999,2000,2003 &gt; 1999-2003) - (E) average cyl - (F) most frequent transmission type (if there is a tie, print out all separated by |) - (G) least frequent drv (if there is a tie, print out all separated by |) - (H) Max cty - (I) Min Hwy - (J) All fuel types (fl). Separate by | (E.g. f,r,e &gt; f|r|e) - (K) Class with the longest name - (L) Transition sub-type with the largest number (if there is tie, print out all separated by |) Tips: Use this to set up your new dataframe: mpg_summary &lt;- data.frame(A=character(), B=character(), C=character(), D=character(), E=character(), F=character(), G=character(), H=character(), I=character(), J=character(), K=character(), L=character()) Q11 Write a function that takes in a manufacturer name and print out the highway mileage (hwy) range for each car model 7.2 Answers A1 length(unique(mpg$manufacturer)) A2 table(mpg[mpg$class==&quot;suv&quot;,&quot;manufacturer&quot;]) A3 mpg[grepl(&quot;auto&quot;,mpg$trans)&amp;mpg$cyl==4,] A4 mpg$trans_subtype &lt;- gsub(&quot;.*\\\\((.*)\\\\)&quot;,&quot;\\\\1&quot;,mpg$trans) A5 mpg[mpg$model==&quot;toyota tacoma 4wd&quot;,&quot;model&quot;] &lt;- &quot;tacoma 4wd&quot; #or mpg$model &lt;- gsub(&quot;^toyota &quot;, &quot;&quot;,mpg$model) A6 mpg$ID &lt;- paste0(toupper(substr(mpg$manufacturer,1,3)),&quot;_&quot;,mpg$year) A7 table(mpg[grepl(&#39;\\\\d&#39;,mpg$model),&quot;manufacturer&quot;]) A8 manufacturers &lt;- unique(mpg$manufacturer) sapply(manufacturers, function(x){ mean(mpg[mpg$manufacturer==x,]$cty) }) A9 manufacturers &lt;- unique(mpg$manufacturer) sapply(manufacturers, function(x){ x &lt;- mean(mpg[mpg$manufacturer==x&amp;grepl(&#39;\\\\d&#39;,mpg$model),]$cty) if(is.na(x)){0}else{x} }) A10 mpg_summary &lt;- data.frame(A=character(), B=character(), C=character(), D=character(), E=character(), F=character(), G=character(), H=character(), I=character(), J=character(), K=character(), L=character()) for(x in unique(mpg$manufacturer)){ subset &lt;- mpg[mpg$manufacturer==x,] A &lt;- x B &lt;- length(unique(subset$model)) C &lt;- mean(subset$displ) D &lt;- paste0(min(subset$year),&quot;-&quot;,max(subset$year)) E &lt;- mean(subset$cyl) F &lt;- paste(names(which(table(subset$trans)==max(table(subset$trans)))),collapse = &quot;|&quot;) G &lt;- paste(names(which(table(subset$trans)==min(table(subset$trans)))),collapse = &quot;|&quot;) H &lt;- max(subset$cty) I &lt;- min(subset$hwy) J &lt;- paste(unique(subset$fl),collapse = &quot;|&quot;) K &lt;- subset$class[which.max(nchar(subset$class))] largest_value &lt;- max(gsub(&quot;.(\\\\d)&quot;,&quot;\\\\1&quot;,subset$trans_subtype[grepl(&quot;\\\\d&quot;,subset$trans_subtype)])) L &lt;- paste(unique(subset$trans_subtype[grepl(largest_value,subset$trans_subtype)]), collapse = &quot;|&quot;) mpg_summary[nrow(mpg_summary)+1,] &lt;- c(A,B,C,D,E,F,G,H,I,J,K,L) } A11 get_hwy_ranage &lt;-function(x){ lower &lt;- min(mpg[mpg$manufacturer==x,&quot;hwy&quot;]) upper &lt;- max(mpg[mpg$manufacturer==x,&quot;hwy&quot;]) print(paste0(lower,&quot;-&quot;,upper)) } } "]]
